Please answer the below Data Structure Questions:
why do we need data structure?
A.Data structures bring together the data elements in a logical way and facilitate the effective use,
persistence and sharing of data. They provide a formal model that describes the way the data elements are
organized. Data structures are the building blocks for more sophisticated applications.

What are the various operations that can be performed on different Data Structures?
Data Structure Operations :
-Searching – We can easily search for any data element in a data structure.
-Sorting – We can sort the elements either in ascending or descending order.
-Insertion – We can insert new data elements in the data structure.
-Deletion – We can delete the data elements from the data structure.

List out the areas in which data structures are applied extensively?
Structures are widely used in almost every aspect of Computer Science, i.e., Compiler Design, Operating Systems,
 Graphics, Artificial Intelligence, and many more.

Data Structures are the main part of many Computer Science Algorithms as they allow the programmers to manage
the data in an effective way. It plays a crucial role in improving the performance of a program or software,
as the main objective of the software is to store and retrieve the user's data as fast as possible.

what is an Array?
An array is a container object that holds a fixed number of values of a single type. The length of an array
is established when the array is created. After creation, its length is fixed

what is the difference between the Array and ArrayList?
1.Array
-Length of Array is static that means one cannot change its length that has been already defined by the developer
to that particular element. This Array needs to specify the size of the elements.
-In other words, the length of the elements in the array is static or  requires more memory to store the elements
and less time to iterate the elements.
-Array does not allow generics, though multidimensional in nature.
-In the array, giving references to objects or elements  depends upon the type of array such
as primitive type or object type.
-Functions such as indexOf() and remove() are not supported by Arrays in Java.
2.ArrayList
-ArrayList uses the size() method to compute the size of the elements. Also, it is dynamic, which means one can
change the size of the arraylist if the elements are modified in it, which means the length of the arraylist
 is variable.
-ArrayList requires more memory to store the elements as well as more time to iterate.
-ArraList enables the use of generic and single dimensional in nature.
-In arrayList, we can convert the primitive int data type into an Integer object with the help of commands such
as “arraylist.add(1)” as shown in example.
-Since primitive data types can be created in ArrayList, the members of ArrayList are always given references
 to the  objects at every different memory locations . Thus, in ArrayList, the actual objects or elements are
 never stored at contiguous locations whereas their References can be stored at contiguous locations.
-In ArrayList, primitive types have actual values with contiguous locations, however object type allocation
is similar to ArrayList.
-Operations such as indexOf(), remove() are supported by ArrayList in Java.

what is LinkedList?
A linked list in Java is a dynamic data structure whose size increases as you add the elements and
decreases as you remove the elements from the list. The elements in the linked list are stored in
containers. The list holds the link to the first container.

How is an Array different from Linked List?
Both Array and Linked List are linear data structures but difference is in how they are stored in memory.
 While Array follows contigious memory fashion with Linked List their is no such boundations.
You can treat Array as winded wire, no addition can be made in between, only at end new windings
 can be made. Or a new similar winding is made with feature required.
Linked List can be treated as Linked Chain. As per requirement links can be added or removed from
anywhere without effecting other links.

what is queue?
Queue in Java is a linear data structure where you can handle an ordered collection of elements.
It follows the FIFO principle to add elements from one end and remove them from the other end.

what is stack?
The stack is a linear data structure that is used to store the collection of objects. It is based
on Last-In-First-Out (LIFO). Java collection framework provides many interfaces and classes to store
the collection of objects. One of them is the Stack class that provides different operations such as push,
pop, search, etc.

what is FIFO and LIFO?
-The full form of FIFO is First In, First Out. FIFO is a method of organizing, handling, and manipulating
the data structure of elements in a computing system. It's a type of data handling which prioritizes
the processes that come first- meaning, it will first remove or append those elements that came first.

-The full form of LIFO is Last In First Out. LIFO is one of the methods of processing data.
It is the opposite of FIFO. LIFO works on the principle that the items that entered the last
are the first to be removed.

what is the order of complexity?
The most common complexity classes are (in ascending order of complexity):
O(1), O(log n), O(n), O(n log n), O(n²).

 what is the worst case to search an element from an array?
The worst-case performance is when the search item appears at the end of the list or not at all.
This would require N comparisons, hence, the worse case is O(N).

what is tree in data structure?
A tree is a hierarchical data structure defined as a collection of nodes. Nodes represent value and
nodes are connected by edges. A tree has the following properties: The tree has one node called root.
The tree originates from this, and hence it does not have any parent.

what is graph in data structure?
Graphs in data structures are non-linear data structures made up of a finite number of nodes or vertices
and the edges that connect them. Graphs in data structures are used to address real-world problems in
which it represents the problem area as a network like telephone networks, circuit networks,
and social networks.

what is the difference between the HashTable and HashMap?
HashMap is non-syncronized and is not thread safe while HashTable is thread safe and is synchronized.
HashMap allows one null key and values can be null whereas HashTable doesn't allow null key or value.
HashMap is faster than HashTable.

What are the major data structures used in the following areas :RDBMS, Network data model and Hierarchical data model.
1. RDBMS Array (i.e. Array of structures)
2. Network data model Graph
3. Hierarchical data model Trees.

How HashMap works in java?
A hashmap uses a hashtable, however, it is internally implemented using two data structures namely
an array and a linked list. Whenever you declare a hashmap, internally, it will create an array of buckets.
The buckets are referred to as nodes or you can say a linked list. A node can represent :
-Hashcode
-Key
-Value
-Address of the next node

What is ArrayIndexOutOfBoundsException in java? When it occurs?
The ArrayIndexOutOfBoundsException is a runtime exception in Java that occurs when an array is accessed
with an illegal index. The index is either negative or greater than or equal to the size of the array.

What are the different ways of copying an array into another array?
1.Using variable assignment.
2.Create a new array of the same length and copy each element.
3.Use the clone method of the array. Clone methods create a new array of the same size.
4.Use System.arraycopy() method. arraycopy can be used to copy a subset of an array.

What is difference between an array and a linked list?
An array is a collection of elements of a similar data type. Linked List is an ordered collection
of elements of the same type in which each element is connected to the next using pointers.
Array elements can be accessed randomly using the array index. Random accessing is not possible
in linked lists.

What is DFS and BFS?
BFS:
Used for finding the shortest path between two nodes, testing if a graph is bipartite,
finding all connected components in a graph, etc.
DFS:
Used for topological sorting, solving problems that require graph backtracking,
detecting cycles in a graph, finding paths between two nodes, etc.

What is Recursion?
a method that calls itself is known as a recursive method. And, this process is known as recursion.

What are linear and non linear data Structures?
1.Linear Data Structure:
Data structure where data elements are arranged sequentially or linearly where each and every element
is attached to its previous and next adjacent is called a linear data structure. In linear data structure,
single level is involved. Therefore, we can traverse all the elements in single run only.
Linear data structures are easy to implement because computer memory is arranged in a linear way.
Its examples are array, stack, queue, linked list, etc.
2.Non-linear Data Structure:
Data structures where data elements are not arranged sequentially or linearly are called
non-linear data structures. In a non-linear data structure, single level is not involved.
Therefore, we can’t traverse all the elements in single run only. Non-linear data structures are not
easy to implement in comparison to linear data structure. It utilizes computer memory efficiently
in comparison to a linear data structure. Its examples are trees and graphs.

What is Big-(O)-notation?
A theoretical measure of the execution of an algorithm, usually the time or memory needed, given
the problem size n, which is usually the number of items.

Outlined different kind of sorting algorithm with time complexity?
-Bubble Sort: O(n^2)
-Selection Sort: O(n^2)
-Insertion Sort: O(n^2)
-Merge Sort: O(n log n)
-Quick Sort: O(n log n) on average, O(n^2) in worst case
-Heap Sort: O(n log n)
-Radix Sort: O(n k), where k is the number of digits in the largest number

Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
-Best case time complexity of different data structures for different operations
Data  structure             	Access            	Search	               Insertion	          Deletion
Array                            O(1)	              O(1)	                  O(1)	                O(1)
Stack                            O(1)	              O(1)	                  O(1)	                O(1)
Queue	                         O(1)	              O(1)	                  O(1)	                O(1)
Singly Linked list	             O(1)	              O(1)                    O(1)	                O(1)
Doubly Linked List	             O(1)	              O(1)	                  O(1)	                O(1)
Hash Table	                     O(1)	              O(1)	                  O(1)	                O(1)
Binary Search Tree             	 O(log n)	          O(log n)	              O(log n)	            O(log n)
AVL Tree	                     O(log n)	          O(log n)	              O(log n)	            O(log n)
B Tree	                         O(log n)	          O(log n)	              O(log n)	            O(log n)
Red Black Tree       	         O(log n)	          O(log n)	              O(log n)	            O(log n)

Worst Case time complexity of different data structures for different operations
Data structure	          Access	      Search	  Insertion	  Deletion
Array	                   O(1)	            O(N)	     O(N)	    O(N)
Stack	                   O(N)	            O(N)	     O(1)	    O(1)
Queue                      O(N)	            O(N)	     O(1)	    O(1)
Singly Linked list	       O(N)	            O(N)	     O(N)	    O(N)
Doubly Linked List	       O(N)	            O(N)	     O(1)	    O(1)
Hash Table	               O(N)	            O(N)	     O(N)	    O(N)
Binary Search Tree	       O(N)	            O(N)	     O(N)	    O(N)
AVL Tree	               O(log N)	        O(log N)	 O(log N)	O(log N)
Binary Tree	               O(N)	            O(N)	     O(N)	    O(N)
Red Black Tree	           O(log N)	        O(log N)	 O(log N)	O(log N)

The average time complexity of different data structures for different operations
Data structure	       Access	    Search	    Insertion	   Deletion
Array	                O(1)	      O(N)	      O(N)	        O(N)
Stack	                O(N)	      O(N)	      O(1)	        O(1)
Queue	                O(N)	      O(N)	      O(1)	        O(1)
Singly Linked list	    O(N)	      O(N)	      O(1)	        O(1)
Doubly Linked List	    O(N)	      O(N)	      O(1)	        O(1)
Hash Table	            O(1)	      O(1)	      O(1)	        O(1)
Binary Search Tree	    O(log N)	  O(log N)	  O(log N)	    O(log N)
AVL Tree	            O(log N)	  O(log N)	  O(log N)	    O(log N)
B Tree	                O(log N)	  O(log N)	  O(log N)	    O(log N)
Red Black Tree	        O(log N)	  O(log N)	  O(log N)	    O(log N)

